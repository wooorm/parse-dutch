import fs from 'node:fs/promises'
import {fromHtml} from 'hast-util-from-html'
import {select, selectAll} from 'hast-util-select'
import {toText} from 'hast-util-to-text'
import regexgen from 'regexgen'
import {fetch} from 'undici'

const response = await fetch(
  'https://nl.wikipedia.org/wiki/Lijst_van_afkortingen_in_het_Nederlands'
)
const text = await response.text()

const tree = fromHtml(text)
const rows = selectAll('table tr', tree)

/** @type {Set<string>} */
const sensitive = new Set()
/** @type {Set<string>} */
const insensitive = new Set([
  'inc',
  'ltd',
  // Gram
  'gr',
  // Seconden
  'sec',
  // Days.
  'ma',
  'di',
  'wo',
  'woe',
  'do',
  'vr',
  'vrij',
  'za',
  'zat',
  'zo',
  // Months.
  'jan',
  'feb',
  'febr',
  'mrt',
  'apr',
  'jun',
  'jul',
  'aug',
  'sep',
  'sept',
  'okt',
  'nov',
  'dec'
])

for (const row of rows) {
  const data = select('td', row)

  if (!data) continue

  const entries = toText(data)
    // Remove extra info in parens.
    .replace(/\([^)]+\)/, '')
    .replace(/ (?:\/|of) /g, ' ')
    .replace(/[,;] /g, ' ')
    .trim()
    .split(/ +/g)

  for (const entry of entries) {
    // Itâ€™s about the final dot: whether that breaks sentences or not.
    if (!/\.$/.test(entry)) continue

    const initialism = entry.split('.').every((d) => {
      return d.length < 2
    })

    if (initialism) continue

    const word = entry.slice(0, -1)

    if (word === word.toLowerCase()) {
      insensitive.add(word)
    } else {
      sensitive.add(word)
    }
  }
}

const insensitiveX = [...insensitive].sort()
const sensitiveX = [...sensitive]
  .sort()
  .filter((d) => !insensitive.has(d.toLowerCase()))

await fs.writeFile(
  new URL('../lib/regex.js', import.meta.url),
  [
    '// Note: this file is generated by `script/generate-regex.js`',
    'export const insensitive =',
    '  /^(' + regexgen(insensitiveX).source + ')$/',
    '',
    'export const sensitive =',
    '  /^(' + regexgen(sensitiveX).source + ')$/',
    ''
  ].join('\n')
)
